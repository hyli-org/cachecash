{"noir_version":"1.0.0-beta.9+6abff2f16e1c1314ba30708d1cf032a536de3d19","hash":"9580211371444589473","abi":{"parameters":[{"name":"owner_pk","type":{"kind":"field"},"visibility":"private"},{"name":"old_address","type":{"kind":"field"},"visibility":"public"},{"name":"new_address","type":{"kind":"field"},"visibility":"public"}],"return_type":null,"error_types":{"8440903874686811520":{"error_kind":"string","string":"New address is not owned by the owner"},"10714477864692412798":{"error_kind":"string","string":"Old address is not owned by the owner"}}},"bytecode":"","debug_symbols":"pZjNbttIEITfRWcd2NXzm1dZLALFUQIBgmwodoCFkXdfUuxPtg/keqXTjKemy6Vhf2Nar5vv+28vP78eTj8ef22+/PW6+XY+HI+Hn1+Pjw+758PjaVx9/bPd8OPX5/N+Py5t3ulj1dPuvD89b76cXo7H7eb37vhy2fTraXe6jM+786gO283+9H0cR8Mfh+N+mv3ZvlUPy6WWFcVW/Vpe8od6W66vlqO+FrvWZ32o13K9X39/svJW3z/U+3K91HoYyActOaSVE/ABB3O1JYe87NATZ9DzYv3aGfR2PYN8yxlUK5xB9WHJoa2cQa1+bYO+eIp9xWHQtZGGkm/J0N+eQ9dihrVebtdjsLrUyyv1b63klhZZWHkQKRMg1bxosNKLKSUipFTe8dg+Wqw0o7u4Dty9L1qUFQsb0vUgtJyirkFVrw8zKS1arPRDqTRUHewmg1KvBloy0Fo/Jbi07DcZlKvB+374HwbNMGj1ljOoToKaF5+CVjrSGxdDGvwmg2r/bbDaStmvN0tuw2KGFYteQaL3fovBeKVd78ehLj4J9Xubqd/bTP3OZlo9hfGz47ByL7jf2U6rBne3Ux2G6zmmxYP0cufNtGrwmZvJ253NtGrwmWZaNfhMM62dwadupqQ7W2nV4DOttHI5u3iK/u61b/pr//f40+7hcP7wsr8Zpstju7F50Dz4OIwZ0/Qmu93k6S12uynzUKcXme2mzVqfF22YV83mZVOse6yHlYWXlVgPN2sx9nnUMO+XzfulWPdYT7GeY73Eeo318FP4eeRzi1Hzfvd5v6dYz7EeH9Yjn8fH9fi8afTz8aCSxagYPcY0vaWMY56eyDiWWK8xttD7rOfwy+GXNevZQ0+xnmMsodfQW6z3eSzDrBeb9RL5SuQrka9EvhL5SuQrka9Evhr5auSrka9Gvhr5auSrka9Gvhr5auRrka9Fvhb5WuRrka9Fvhb5WuRrka9Fvh75euTrka9Hvh75euTrka9Hvh75euSzIQLaEAnHfyWQnEliT2ZPQapMGnsiqVlENTMmEdbM2ZOQMpPCnsqehkRmkVlkFplFZpFZZBaZRWaRWWR2MjuZncxOZiezk9nJ7GR2MjuZE5kTmUHJYMmAyaDJwMngyQDKIMpAymDKgMqgysDK4MoAyyDLQMtgy4DLoMvAy+DLAMwgzEDMYMyAzKDMwMzgzADNIM1AzWDNgM2gzcDN4M0AziDOQM5gzoDOoM7AzuDOAM8gz0DPYM+Az6DPwM/gzwDQINBA0GBQMCgYFAwKBgWDgkHBoGBQMCgYFAwKBgWDgkHBoGBQMCgYFAwKBgWDgkHBoGBQMCgYFAwKBgWDgkHBoGBQMCgYFAwKBgWDgkHBoGBQMCgYFAwKBgWDgkHBoGBQMCgYFAwKBgWDgkHBoGBQMCgYFAwKBgWDgkHBoGBQMCgYFAwKBgWDgkFdGOzTxJhoehmbJj59GTZNElJGKkgVqSH1kBrODecLg5eJM0lRNTE4VxWkitSQekgTgxdpYvAidZw7zp3MFwYvk0JVpaoh9VnyicF0eYGKzD4IyZESUmZSmFQmjao4Dbc4DZ8YvEgTg7PkSAkpI02Zp/8Nfu/Oh9234z6+sf7xcnp49wX28z9PKHzF/XR+fNh/fznvp/ffiza+Ef8L","file_map":{"52":{"source":"use poseidon::poseidon2;\n\npub struct Note {\n    pub kind: Field,\n    pub value: Field,\n    pub address: Field,\n    pub psi: Field,\n}\n\npub struct InputNote {\n    pub note: Note,\n    pub secret_key: Field,\n}\n\npub fn check_commitment(note: Note, commitment: Field) {\n    assert(get_note_commitment(note) == commitment, \"Note commitment is not valid\");\n}\n\npub fn get_note_commitment(note: Note) -> Field {\n    if (note.kind == 0) {\n        assert(note.value == 0, \"Padding notes must be zero value\");\n        0\n    } else {\n        poseidon2::Poseidon2::hash(\n            [0x2, note.kind, note.value, note.address, note.psi, 0, 0],\n            7,\n        )\n    }\n}\n\npub fn get_address(secret_key: Field) -> Field {\n    poseidon2::Poseidon2::hash([secret_key, 0], 2)\n}\n\npub fn check_input_note_ownership(input_note: InputNote) {\n    if (input_note.note.value != 0) {\n        assert(\n            get_address(input_note.secret_key) == input_note.note.address,\n            \"Input note is not owned by the owner\",\n        );\n    }\n}\n\npub fn slice<let N: u32, let L: u32>(bytes: [u8; N], start: u32) -> [u8; L] {\n    let end = start + L;\n    assert(end <= N, \"slice: slice end out of bounds\");\n    let mut result = [bytes[0]; L];\n    for i in 0..L {\n        result[i] = bytes[start + i];\n    }\n    result\n}\n\npub fn field_from_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n    assert(bytes.len() < 32, \"field_from_bytes: N must be less than 32\");\n    let mut as_field = 0;\n    let mut offset = 1;\n    for i in 0..N {\n        as_field += (bytes[i] as Field) * offset;\n        offset *= 256;\n    }\n    as_field\n}\n\npub fn is_one_of(value: Field, one_of: [Field]) -> bool {\n    let mut is_one_of = false;\n    for possible in one_of {\n        if possible == value {\n            is_one_of = true;\n        }\n    }\n    is_one_of\n}\n","path":"/Users/calummoore/conductor/repo/zk-rollup/calummoore-petra/noir/common/src/lib.nr"},"59":{"source":"use std::default::Default;\nuse std::hash::Hasher;\n\ncomptime global RATE: u32 = 3;\n\npub struct Poseidon2 {\n    cache: [Field; 3],\n    state: [Field; 4],\n    cache_size: u32,\n    squeeze_mode: bool, // 0 => absorb, 1 => squeeze\n}\n\nimpl Poseidon2 {\n    #[no_predicates]\n    pub fn hash<let N: u32>(input: [Field; N], message_size: u32) -> Field {\n        Poseidon2::hash_internal(input, message_size, message_size != N)\n    }\n\n    pub(crate) fn new(iv: Field) -> Poseidon2 {\n        let mut result =\n            Poseidon2 { cache: [0; 3], state: [0; 4], cache_size: 0, squeeze_mode: false };\n        result.state[RATE] = iv;\n        result\n    }\n\n    fn perform_duplex(&mut self) {\n        // add the cache into sponge state\n        for i in 0..RATE {\n            // We effectively zero-pad the cache by only adding to the state\n            // cache that is less than the specified `cache_size`\n            if i < self.cache_size {\n                self.state[i] += self.cache[i];\n            }\n        }\n        self.state = crate::poseidon2_permutation(self.state, 4);\n    }\n\n    fn absorb(&mut self, input: Field) {\n        assert(!self.squeeze_mode);\n        if self.cache_size == RATE {\n            // If we're absorbing, and the cache is full, apply the sponge permutation to compress the cache\n            self.perform_duplex();\n            self.cache[0] = input;\n            self.cache_size = 1;\n        } else {\n            // If we're absorbing, and the cache is not full, add the input into the cache\n            self.cache[self.cache_size] = input;\n            self.cache_size += 1;\n        }\n    }\n\n    fn squeeze(&mut self) -> Field {\n        assert(!self.squeeze_mode);\n        // If we're in absorb mode, apply sponge permutation to compress the cache.\n        self.perform_duplex();\n        self.squeeze_mode = true;\n\n        // Pop one item off the top of the permutation and return it.\n        self.state[0]\n    }\n\n    fn hash_internal<let N: u32>(\n        input: [Field; N],\n        in_len: u32,\n        is_variable_length: bool,\n    ) -> Field {\n        let two_pow_64 = 18446744073709551616;\n        let iv: Field = (in_len as Field) * two_pow_64;\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..input.len() {\n            if i < in_len {\n                sponge.absorb(input[i]);\n            }\n        }\n\n        // In the case where the hash preimage is variable-length, we append `1` to the end of the input, to distinguish\n        // from fixed-length hashes. (the combination of this additional field element + the hash IV ensures\n        // fixed-length and variable-length hashes do not collide)\n        if is_variable_length {\n            sponge.absorb(1);\n        }\n        sponge.squeeze()\n    }\n}\n\npub struct Poseidon2Hasher {\n    _state: [Field],\n}\n\nimpl Hasher for Poseidon2Hasher {\n    fn finish(self) -> Field {\n        let iv: Field = (self._state.len() as Field) * 18446744073709551616; // iv = (self._state.len() << 64)\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..self._state.len() {\n            sponge.absorb(self._state[i]);\n        }\n        sponge.squeeze()\n    }\n\n    fn write(&mut self, input: Field) {\n        self._state = self._state.push_back(input);\n    }\n}\n\nimpl Default for Poseidon2Hasher {\n    fn default() -> Self {\n        Poseidon2Hasher { _state: &[] }\n    }\n}\n","path":"/Users/calummoore/nargo/github.com/noir-lang/poseidon/v0.1.1/src/poseidon2.nr"},"65":{"source":"use common::get_address;\nuse poseidon_alt::hash;\n\nfn main(owner_pk: Field, old_address: pub Field, new_address: pub Field) {\n    let calc_new_address = get_address(owner_pk);\n    assert(calc_new_address == new_address, \"New address is not owned by the owner\");\n\n    let calc_old_address = get_old_address(owner_pk);\n    assert(calc_old_address == old_address, \"Old address is not owned by the owner\");\n}\n\nfn get_old_address(owner_pk: Field) -> Field {\n    hash([owner_pk, 0])\n}\n\n#[test]\nfn test_main() {\n    let pk = 101;\n    let new_address = get_address(pk);\n    let old_address = get_old_address(pk);\n\n    println(new_address);\n    println(old_address);\n\n    main(pk, old_address, new_address)\n}\n","path":"/Users/calummoore/conductor/repo/zk-rollup/calummoore-petra/noir/migrate/src/main.nr"},"68":{"source":"use crate::constants::{FULL_ROUNDS, PARTIAL_ROUNDS, RATE, ROUND_CONSTANTS, MDS};\n\n// S-box function (x^5)\nfn sbox(x: Field) -> Field {\n    let x2 = x * x;\n    let x4 = x2 * x2;\n    x4 * x\n}\n\n// Apply MDS matrix multiplication\nfn apply_mds(state: [Field; 3]) -> [Field; 3] {\n    let mut result = [0; 3];\n    for i in 0..3 {\n        for j in 0..3 {\n            result[i] = result[i] + MDS[i][j] * state[j];\n        }\n    }\n    result\n}\n\n// Full round function: S-box on all elements + MDS\nfn full_round(mut state: [Field; 3], round_constants: [Field; 3]) -> [Field; 3] {\n    // Add round constants and apply S-box to all elements\n    for i in 0..3 {\n        state[i] = sbox(state[i] + round_constants[i]);\n    }\n    // Apply MDS matrix\n    apply_mds(state)\n}\n\n// Partial round function: S-box on first element only + MDS\nfn partial_round(mut state: [Field; 3], round_constants: [Field; 3]) -> [Field; 3] {\n    // Add round constants\n    for i in 0..3 {\n        state[i] = state[i] + round_constants[i];\n    }\n    // Apply S-box only to first element\n    state[0] = sbox(state[0]);\n    // Apply MDS matrix\n    apply_mds(state)\n}\n\n// Main permutation function\npub fn permute(mut state: [Field; 3]) -> [Field; 3] {\n    let r_f = FULL_ROUNDS / 2;\n    let r_p = PARTIAL_ROUNDS;\n    \n    let mut round_idx = 0;\n    \n    // First half of full rounds\n    for _ in 0..r_f {\n        state = full_round(state, ROUND_CONSTANTS[round_idx]);\n        round_idx = round_idx + 1;\n    }\n    \n    // Partial rounds\n    for _ in 0..r_p {\n        state = partial_round(state, ROUND_CONSTANTS[round_idx]);\n        round_idx = round_idx + 1;\n    }\n    \n    // Second half of full rounds\n    for _ in 0..r_f {\n        state = full_round(state, ROUND_CONSTANTS[round_idx]);\n        round_idx = round_idx + 1;\n    }\n    \n    state\n}\n\n// Sponge construction for constant-length hashing\npub struct PoseidonSponge {\n    state: [Field; 3],\n    cache: [Field; 2],\n    cache_size: u32,\n}\n\nimpl PoseidonSponge {\n    // Initialize with initial capacity element for constant-length domain separation\n    pub fn new(initial_capacity: Field) -> Self {\n        let mut state = [0; 3];\n        state[2] = initial_capacity; // Set capacity element at index RATE (2)\n        Self {\n            state,\n            cache: [0; 2],\n            cache_size: 0,\n        }\n    }\n    \n    // Absorb a field element\n    pub fn absorb(&mut self, input: Field) {\n        if self.cache_size == RATE {\n            // Cache is full, perform duplex round\n            self.perform_duplex();\n            self.cache[0] = input;\n            self.cache_size = 1;\n        } else {\n            // Add to cache\n            self.cache[self.cache_size] = input;\n            self.cache_size = self.cache_size + 1;\n        }\n    }\n    \n    // Perform duplex operation (add cache to state and permute)\n    fn perform_duplex(&mut self) {\n        // Add cached values to state\n        for i in 0..RATE {\n            if i < self.cache_size {\n                self.state[i] = self.state[i] + self.cache[i];\n            }\n        }\n        // Apply permutation\n        self.state = permute(self.state);\n        // Clear cache\n        self.cache_size = 0;\n    }\n    \n    // Squeeze output\n    pub fn squeeze(mut self) -> Field {\n        // Final duplex to compress any remaining cached data\n        self.perform_duplex();\n        // Return first element\n        self.state[0]\n    }\n}\n\n// Hash function for 2 elements (matching the Rust implementation)\npub fn hash_2(left: Field, right: Field) -> Field {\n    // Initial capacity element: (2 << 64) for ConstantLength<2>\n    let initial_capacity = 2 * 0x10000000000000000; // 2 * 2^64\n    \n    let mut sponge = PoseidonSponge::new(initial_capacity);\n    sponge.absorb(left);\n    sponge.absorb(right);\n    sponge.squeeze()\n}\n\n// Generic hash function for N elements\npub fn hash<let N: u32>(inputs: [Field; N]) -> Field {\n    // Initial capacity element: (N << 64) for ConstantLength<N>\n    let initial_capacity = (N as Field) * 0x10000000000000000; // N * 2^64\n    \n    let mut sponge = PoseidonSponge::new(initial_capacity);\n    for i in 0..N {\n        sponge.absorb(inputs[i]);\n    }\n    \n    // Add padding (zero padding) to make total absorbed elements a multiple of RATE\n    // Calculate how many zeros to add\n    let k = (N + RATE - 1) / RATE; // Ceiling division\n    let padding_count = k * RATE - N;\n    for _ in 0..padding_count {\n        sponge.absorb(0);\n    }\n    \n    sponge.squeeze()\n}","path":"/Users/calummoore/conductor/repo/zk-rollup/calummoore-petra/noir/poseidon_alt/src/poseidon.nr"}},"names":["main"],"brillig_names":[]}