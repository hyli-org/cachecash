{"noir_version":"1.0.0-beta.9+6abff2f16e1c1314ba30708d1cf032a536de3d19","hash":"1005196609040896285","abi":{"parameters":[{"name":"verification_key","type":{"kind":"array","length":115,"type":{"kind":"field"}},"visibility":"private"},{"name":"verification_key_hash","type":{"kind":"field"},"visibility":"private"},{"name":"utxo_agg_proofs","type":{"kind":"array","length":2,"type":{"kind":"struct","path":"UtxoAggProof","fields":[{"name":"proof","type":{"kind":"array","length":508,"type":{"kind":"field"}}},{"name":"old_root","type":{"kind":"field"}},{"name":"new_root","type":{"kind":"field"}},{"name":"commit_hash","type":{"kind":"field"}}]}},"visibility":"private"},{"name":"old_root","type":{"kind":"field"},"visibility":"public"},{"name":"new_root","type":{"kind":"field"},"visibility":"public"},{"name":"commit_hash","type":{"kind":"field"},"visibility":"public"},{"name":"messages","type":{"kind":"array","length":30,"type":{"kind":"field"}},"visibility":"public"}],"return_type":null,"error_types":{"6622469808309600859":{"error_kind":"string","string":"proof old_root must match previous root"},"8016078727437709872":{"error_kind":"string","string":"only agg_utxo proof allowed"},"14733917638491950699":{"error_kind":"string","string":"Roots must match"}}},"bytecode":"","debug_symbols":"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","file_map":{"22":{"source":"pub mod hash;\npub mod aes128;\npub mod array;\npub mod slice;\npub mod ecdsa_secp256k1;\npub mod ecdsa_secp256r1;\npub mod embedded_curve_ops;\npub mod field;\npub mod collections;\npub mod compat;\npub mod convert;\npub mod option;\npub mod string;\npub mod test;\npub mod cmp;\npub mod ops;\npub mod default;\npub mod prelude;\npub mod runtime;\npub mod meta;\npub mod append;\npub mod mem;\npub mod panic;\npub mod hint;\n\nuse convert::AsPrimitive;\n\n// Oracle calls are required to be wrapped in an unconstrained function\n// Thus, the only argument to the `println` oracle is expected to always be an ident\n#[oracle(print)]\nunconstrained fn print_oracle<T>(with_newline: bool, input: T) {}\n\nunconstrained fn print_unconstrained<T>(with_newline: bool, input: T) {\n    print_oracle(with_newline, input);\n}\n\npub fn println<T>(input: T) {\n    // Safety: a print statement cannot be constrained\n    unsafe {\n        print_unconstrained(true, input);\n    }\n}\n\npub fn print<T>(input: T) {\n    // Safety: a print statement cannot be constrained\n    unsafe {\n        print_unconstrained(false, input);\n    }\n}\n\n#[deprecated(\"This functions is deprecated in favour of external verification libraries. To verify Barretenberg proofs, it's recommended to use the library https://github.com/AztecProtocol/aztec-packages/tree/next/barretenberg/noir/bb_proof_verification\")]\npub fn verify_proof<let N: u32, let M: u32, let K: u32>(\n    verification_key: [Field; N],\n    proof: [Field; M],\n    public_inputs: [Field; K],\n    key_hash: Field,\n) {\n    verify_proof_internal(verification_key, proof, public_inputs, key_hash, 0);\n}\n\n/// Asserts the validity of the provided proof and public inputs against the provided verification key and hash.\n///\n/// The ACVM cannot determine whether the provided proof is valid during execution as this requires knowledge of\n/// the backend against which the program is being proven. However if an invalid proof if submitted, the program may\n/// fail to prove or the backend may generate a proof which will subsequently fail to verify.\n///\n/// # Important Note\n///\n/// If you are not developing your own backend such as [Barretenberg](https://github.com/AztecProtocol/barretenberg)\n/// you probably shouldn't need to interact with this function directly. It's easier and safer to use a verification\n/// library which is published by the developers of the backend which will document or enforce any safety requirements.\n///\n/// If you use this directly, you're liable to introduce underconstrainedness bugs and *your circuit will be insecure*.\n///\n/// # Arguments\n/// - verification_key: The verification key of the circuit to be verified.\n/// - proof: The proof to be verified.\n/// - public_inputs: The public inputs associated with `proof`\n/// - key_hash: The hash of `verification_key` of the form expected by the backend.\n/// - proof_type: An identifier for the proving scheme used to generate the proof to be verified. This allows\n///               for a single backend to support verifying multiple proving schemes.\n///\n/// # Constraining `key_hash`\n///\n/// The Noir compiler does not by itself constrain that `key_hash` is a valid hash of `verification_key`.\n/// This is because different backends may differ in how they hash their verification keys.\n/// It is then the responsibility of either the noir developer (by explicitly hashing the verification key\n/// in the correct manner) or by the proving system itself internally asserting the correctness of `key_hash`.\npub fn verify_proof_with_type<let N: u32, let M: u32, let K: u32>(\n    verification_key: [Field; N],\n    proof: [Field; M],\n    public_inputs: [Field; K],\n    key_hash: Field,\n    proof_type: u32,\n) {\n    if !crate::runtime::is_unconstrained() {\n        crate::assert_constant(proof_type);\n    }\n    verify_proof_internal(verification_key, proof, public_inputs, key_hash, proof_type);\n}\n\n#[foreign(recursive_aggregation)]\nfn verify_proof_internal<let N: u32, let M: u32, let K: u32>(\n    verification_key: [Field; N],\n    proof: [Field; M],\n    public_inputs: [Field; K],\n    key_hash: Field,\n    proof_type: u32,\n) {}\n\n// Asserts that the given value is known at compile-time.\n// Useful for debugging for-loop bounds.\n#[builtin(assert_constant)]\npub fn assert_constant<T>(x: T) {}\n\n// Asserts that the given value is both true and known at compile-time.\n// The message can be a string, a format string, or any value, as long as it is known at compile-time\n#[builtin(static_assert)]\npub fn static_assert<T>(predicate: bool, message: T) {}\n\n#[deprecated(\"wrapping operations should be done with the Wrapping traits. E.g: x.wrapping_add(y)\")]\npub fn wrapping_add<T>(x: T, y: T) -> T\nwhere\n    T: AsPrimitive<Field>,\n    Field: AsPrimitive<T>,\n{\n    AsPrimitive::as_(x.as_() + y.as_())\n}\n#[deprecated(\"wrapping operations should be done with the Wrapping traits. E.g: x.wrapping_sub(y)\")]\npub fn wrapping_sub<T>(x: T, y: T) -> T\nwhere\n    T: AsPrimitive<Field>,\n    Field: AsPrimitive<T>,\n{\n    //340282366920938463463374607431768211456 is 2^128, it is used to avoid underflow\n    AsPrimitive::as_(x.as_() + 340282366920938463463374607431768211456 - y.as_())\n}\n#[deprecated(\"wrapping operations should be done with the Wrapping traits. E.g: x.wrapping_mul(y)\")]\npub fn wrapping_mul<T>(x: T, y: T) -> T\nwhere\n    T: AsPrimitive<Field>,\n    Field: AsPrimitive<T>,\n{\n    AsPrimitive::as_(x.as_() * y.as_())\n}\n\n#[builtin(as_witness)]\npub fn as_witness(x: Field) {}\n\nmod tests {\n    use super::ops::arith::WrappingMul;\n\n    #[test(should_fail_with = \"custom message\")]\n    fn test_static_assert_custom_message() {\n        super::static_assert(1 == 2, \"custom message\");\n    }\n\n    #[test]\n    fn test_wrapping_mul() {\n        let zero: u128 = 0;\n        let one: u128 = 1;\n        let two_pow_64: u128 = 0x10000000000000000;\n        let u128_max: u128 = 0xffffffffffffffffffffffffffffffff;\n\n        // 1*0==0\n        assert_eq(zero, zero.wrapping_mul(one));\n\n        // 0*1==0\n        assert_eq(zero, one.wrapping_mul(zero));\n\n        // 1*1==1\n        assert_eq(one, one.wrapping_mul(one));\n\n        // 0 * ( 1 << 64 ) ==  0\n        assert_eq(zero, zero.wrapping_mul(two_pow_64));\n\n        // ( 1 << 64 ) * 0 == 0\n        assert_eq(zero, two_pow_64.wrapping_mul(zero));\n\n        // 1 * ( 1 << 64 ) == 1 << 64\n        assert_eq(two_pow_64, two_pow_64.wrapping_mul(one));\n\n        // ( 1 << 64 ) * 1 == 1 << 64\n        assert_eq(two_pow_64, one.wrapping_mul(two_pow_64));\n\n        // ( 1 << 64 ) * ( 1 << 64 ) == 1 << 64\n        assert_eq(zero, two_pow_64.wrapping_mul(two_pow_64));\n        // -1 * -1 == 1\n        assert_eq(one, u128_max.wrapping_mul(u128_max));\n    }\n}\n","path":"std/lib.nr"},"59":{"source":"use std::default::Default;\nuse std::hash::Hasher;\n\ncomptime global RATE: u32 = 3;\n\npub struct Poseidon2 {\n    cache: [Field; 3],\n    state: [Field; 4],\n    cache_size: u32,\n    squeeze_mode: bool, // 0 => absorb, 1 => squeeze\n}\n\nimpl Poseidon2 {\n    #[no_predicates]\n    pub fn hash<let N: u32>(input: [Field; N], message_size: u32) -> Field {\n        Poseidon2::hash_internal(input, message_size, message_size != N)\n    }\n\n    pub(crate) fn new(iv: Field) -> Poseidon2 {\n        let mut result =\n            Poseidon2 { cache: [0; 3], state: [0; 4], cache_size: 0, squeeze_mode: false };\n        result.state[RATE] = iv;\n        result\n    }\n\n    fn perform_duplex(&mut self) {\n        // add the cache into sponge state\n        for i in 0..RATE {\n            // We effectively zero-pad the cache by only adding to the state\n            // cache that is less than the specified `cache_size`\n            if i < self.cache_size {\n                self.state[i] += self.cache[i];\n            }\n        }\n        self.state = crate::poseidon2_permutation(self.state, 4);\n    }\n\n    fn absorb(&mut self, input: Field) {\n        assert(!self.squeeze_mode);\n        if self.cache_size == RATE {\n            // If we're absorbing, and the cache is full, apply the sponge permutation to compress the cache\n            self.perform_duplex();\n            self.cache[0] = input;\n            self.cache_size = 1;\n        } else {\n            // If we're absorbing, and the cache is not full, add the input into the cache\n            self.cache[self.cache_size] = input;\n            self.cache_size += 1;\n        }\n    }\n\n    fn squeeze(&mut self) -> Field {\n        assert(!self.squeeze_mode);\n        // If we're in absorb mode, apply sponge permutation to compress the cache.\n        self.perform_duplex();\n        self.squeeze_mode = true;\n\n        // Pop one item off the top of the permutation and return it.\n        self.state[0]\n    }\n\n    fn hash_internal<let N: u32>(\n        input: [Field; N],\n        in_len: u32,\n        is_variable_length: bool,\n    ) -> Field {\n        let two_pow_64 = 18446744073709551616;\n        let iv: Field = (in_len as Field) * two_pow_64;\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..input.len() {\n            if i < in_len {\n                sponge.absorb(input[i]);\n            }\n        }\n\n        // In the case where the hash preimage is variable-length, we append `1` to the end of the input, to distinguish\n        // from fixed-length hashes. (the combination of this additional field element + the hash IV ensures\n        // fixed-length and variable-length hashes do not collide)\n        if is_variable_length {\n            sponge.absorb(1);\n        }\n        sponge.squeeze()\n    }\n}\n\npub struct Poseidon2Hasher {\n    _state: [Field],\n}\n\nimpl Hasher for Poseidon2Hasher {\n    fn finish(self) -> Field {\n        let iv: Field = (self._state.len() as Field) * 18446744073709551616; // iv = (self._state.len() << 64)\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..self._state.len() {\n            sponge.absorb(self._state[i]);\n        }\n        sponge.squeeze()\n    }\n\n    fn write(&mut self, input: Field) {\n        self._state = self._state.push_back(input);\n    }\n}\n\nimpl Default for Poseidon2Hasher {\n    fn default() -> Self {\n        Poseidon2Hasher { _state: &[] }\n    }\n}\n","path":"/Users/calummoore/nargo/github.com/noir-lang/poseidon/v0.1.1/src/poseidon2.nr"},"62":{"source":"use dep::std;\nuse poseidon::poseidon2;\n\nglobal AGG_UTXO_VERIFICATION_KEY_HASH: Field =\n    17312275849526493518721480386830253666706187309474064656261199404280431862138;\n\nstruct UtxoAggProof {\n    proof: [Field; 508],\n    old_root: Field,\n    new_root: Field,\n    commit_hash: Field,\n}\n\nfn main(\n    verification_key: [Field; 115],\n    verification_key_hash: Field,\n    utxo_agg_proofs: [UtxoAggProof; 2],\n    old_root: pub Field,\n    new_root: pub Field,\n    commit_hash: pub Field,\n    // 6 proofs, 6 per proof\n    messages: pub [Field; 30],\n) {\n    // Hardcode verification_key_hash for agg_utxo proof\n    assert(verification_key_hash == AGG_UTXO_VERIFICATION_KEY_HASH, \"only agg_utxo proof allowed\");\n\n    let mut root = old_root;\n    let mut first_public_inputs: [Field; 18] = [0; 18];\n\n    for i in 0..2 {\n        let proof = utxo_agg_proofs[i];\n        let public_inputs = [\n            messages[15 * i],\n            messages[15 * i + 1],\n            messages[15 * i + 2],\n            messages[15 * i + 3],\n            messages[15 * i + 4],\n            messages[15 * i + 5],\n            messages[15 * i + 6],\n            messages[15 * i + 7],\n            messages[15 * i + 8],\n            messages[15 * i + 9],\n            messages[15 * i + 10],\n            messages[15 * i + 11],\n            messages[15 * i + 12],\n            messages[15 * i + 13],\n            messages[15 * i + 14],\n            proof.old_root,\n            proof.new_root,\n            proof.commit_hash,\n        ];\n\n        if i == 0 {\n            first_public_inputs = public_inputs;\n        }\n\n        std::verify_proof_with_type(\n            verification_key,\n            if proof.old_root != 0 {\n                proof.proof\n            } else {\n                utxo_agg_proofs[0].proof\n            },\n            if proof.old_root != 0 {\n                public_inputs\n            } else {\n                first_public_inputs\n            },\n            verification_key_hash,\n            7,\n        );\n\n        if proof.old_root != 0 {\n            assert(proof.old_root == root, \"proof old_root must match previous root\");\n            root = proof.new_root;\n        }\n    }\n\n    assert(\n        commit_hash\n            == poseidon2::Poseidon2::hash(\n                [utxo_agg_proofs[0].commit_hash, utxo_agg_proofs[1].commit_hash],\n                2,\n            ),\n    );\n    assert(new_root == root, \"Roots must match\");\n}\n","path":"/Users/calummoore/conductor/repo/zk-rollup/calummoore-petra/noir/agg_agg/src/main.nr"}},"names":["main"],"brillig_names":["directive_invert"]}