{"noir_version":"1.0.0-beta.9+6abff2f16e1c1314ba30708d1cf032a536de3d19","hash":"7697695142009322040","abi":{"parameters":[{"name":"owner_pk","type":{"kind":"field"},"visibility":"private"},{"name":"message_hash","type":{"kind":"field"},"visibility":"private"},{"name":"address","type":{"kind":"field"},"visibility":"public"},{"name":"message","type":{"kind":"field"},"visibility":"public"}],"return_type":null,"error_types":{"11080613026690545811":{"error_kind":"string","string":"Address is not owned by the owner"},"14040043062251633219":{"error_kind":"string","string":"Message hash is invalid"}}},"bytecode":"H4sIAAAAAAAA/7WSTQrCMBCF0zatWnUjuPMQ+W0TF1LwJBbTE3gTV17DlWsXegQ9jZjaFEJUFE0fPDJMSHj5JgFoNNZOwLMCsxZmpShjTOVEYYpXiMhScMR4mQksMBd8TQSlSjCRy1LmSGJGFa64pBVqBK270J/qMmf8e07iNupsE23oZL2ZGr6pY1O35+r59LT72gOr3yr0zCD0NyuceJz7J57RlzxT7aH2CDT/v2uegUeeqWee0HlzyzW0+tELNsDqbw+b6WVx2llbD+a1lvP97Fxcj8DRHRcyiSCABAAA","debug_symbols":"pZXNjsIgFIXfhXUXXP7xVSYTgxUNCaENtpNMjO8u1VLtAmLs6pbS7/RyOIQrOtrDeN67cOouaPdzRYfovHfnve9aM7gupLfXW4PycD9Ea9Mr9DafqN5EGwa0C6P3Dfozfnx8dOlNeNTBxDSLG2TDMdUkeHLeTk+35kXjMgqCzjAotuCCrngo8xL4zEsBC8/JiidlnnIy8wzEi9crnpZ5QpSeBQjFpKTAKg5QnBWAElVS4GUFzbIHmhf5mgdaLR7wbzyQILIHkuKSgqp4IOUSA6mLLuqKAiZ5IwEL/k0P+rUPmhR7qGVZy2wDgVKWKzzR+SBRhotngW4MM7DNaYZKGAHEshGg+FddfJYnkJsDBWrjqaoJfBjJ6jI2Z5Ly7ANVYpWp3zQyrYurGwHhqdkGwbOQZ6GppKWwtB9pxKec3KZfRmcO3s43yWkM7dvFMvz3eSZfPX3sWnsco51++ZhLTdwB","file_map":{"52":{"source":"use poseidon::poseidon2;\n\npub struct Note {\n    pub kind: Field,\n    pub value: Field,\n    pub address: Field,\n    pub psi: Field,\n}\n\npub struct InputNote {\n    pub note: Note,\n    pub secret_key: Field,\n}\n\npub fn check_commitment(note: Note, commitment: Field) {\n    assert(get_note_commitment(note) == commitment, \"Note commitment is not valid\");\n}\n\npub fn get_note_commitment(note: Note) -> Field {\n    if (note.kind == 0) {\n        assert(note.value == 0, \"Padding notes must be zero value\");\n        0\n    } else {\n        poseidon2::Poseidon2::hash(\n            [0x2, note.kind, note.value, note.address, note.psi, 0, 0],\n            7,\n        )\n    }\n}\n\npub fn get_address(secret_key: Field) -> Field {\n    poseidon2::Poseidon2::hash([secret_key, 0], 2)\n}\n\npub fn check_input_note_ownership(input_note: InputNote) {\n    if (input_note.note.value != 0) {\n        assert(\n            get_address(input_note.secret_key) == input_note.note.address,\n            \"Input note is not owned by the owner\",\n        );\n    }\n}\n\npub fn slice<let N: u32, let L: u32>(bytes: [u8; N], start: u32) -> [u8; L] {\n    let end = start + L;\n    assert(end <= N, \"slice: slice end out of bounds\");\n    let mut result = [bytes[0]; L];\n    for i in 0..L {\n        result[i] = bytes[start + i];\n    }\n    result\n}\n\npub fn field_from_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n    assert(bytes.len() < 32, \"field_from_bytes: N must be less than 32\");\n    let mut as_field = 0;\n    let mut offset = 1;\n    for i in 0..N {\n        as_field += (bytes[i] as Field) * offset;\n        offset *= 256;\n    }\n    as_field\n}\n\npub fn is_one_of(value: Field, one_of: [Field]) -> bool {\n    let mut is_one_of = false;\n    for possible in one_of {\n        if possible == value {\n            is_one_of = true;\n        }\n    }\n    is_one_of\n}\n","path":"/Users/calummoore/conductor/repo/zk-rollup/calummoore-petra/noir/common/src/lib.nr"},"59":{"source":"use std::default::Default;\nuse std::hash::Hasher;\n\ncomptime global RATE: u32 = 3;\n\npub struct Poseidon2 {\n    cache: [Field; 3],\n    state: [Field; 4],\n    cache_size: u32,\n    squeeze_mode: bool, // 0 => absorb, 1 => squeeze\n}\n\nimpl Poseidon2 {\n    #[no_predicates]\n    pub fn hash<let N: u32>(input: [Field; N], message_size: u32) -> Field {\n        Poseidon2::hash_internal(input, message_size, message_size != N)\n    }\n\n    pub(crate) fn new(iv: Field) -> Poseidon2 {\n        let mut result =\n            Poseidon2 { cache: [0; 3], state: [0; 4], cache_size: 0, squeeze_mode: false };\n        result.state[RATE] = iv;\n        result\n    }\n\n    fn perform_duplex(&mut self) {\n        // add the cache into sponge state\n        for i in 0..RATE {\n            // We effectively zero-pad the cache by only adding to the state\n            // cache that is less than the specified `cache_size`\n            if i < self.cache_size {\n                self.state[i] += self.cache[i];\n            }\n        }\n        self.state = crate::poseidon2_permutation(self.state, 4);\n    }\n\n    fn absorb(&mut self, input: Field) {\n        assert(!self.squeeze_mode);\n        if self.cache_size == RATE {\n            // If we're absorbing, and the cache is full, apply the sponge permutation to compress the cache\n            self.perform_duplex();\n            self.cache[0] = input;\n            self.cache_size = 1;\n        } else {\n            // If we're absorbing, and the cache is not full, add the input into the cache\n            self.cache[self.cache_size] = input;\n            self.cache_size += 1;\n        }\n    }\n\n    fn squeeze(&mut self) -> Field {\n        assert(!self.squeeze_mode);\n        // If we're in absorb mode, apply sponge permutation to compress the cache.\n        self.perform_duplex();\n        self.squeeze_mode = true;\n\n        // Pop one item off the top of the permutation and return it.\n        self.state[0]\n    }\n\n    fn hash_internal<let N: u32>(\n        input: [Field; N],\n        in_len: u32,\n        is_variable_length: bool,\n    ) -> Field {\n        let two_pow_64 = 18446744073709551616;\n        let iv: Field = (in_len as Field) * two_pow_64;\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..input.len() {\n            if i < in_len {\n                sponge.absorb(input[i]);\n            }\n        }\n\n        // In the case where the hash preimage is variable-length, we append `1` to the end of the input, to distinguish\n        // from fixed-length hashes. (the combination of this additional field element + the hash IV ensures\n        // fixed-length and variable-length hashes do not collide)\n        if is_variable_length {\n            sponge.absorb(1);\n        }\n        sponge.squeeze()\n    }\n}\n\npub struct Poseidon2Hasher {\n    _state: [Field],\n}\n\nimpl Hasher for Poseidon2Hasher {\n    fn finish(self) -> Field {\n        let iv: Field = (self._state.len() as Field) * 18446744073709551616; // iv = (self._state.len() << 64)\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..self._state.len() {\n            sponge.absorb(self._state[i]);\n        }\n        sponge.squeeze()\n    }\n\n    fn write(&mut self, input: Field) {\n        self._state = self._state.push_back(input);\n    }\n}\n\nimpl Default for Poseidon2Hasher {\n    fn default() -> Self {\n        Poseidon2Hasher { _state: &[] }\n    }\n}\n","path":"/Users/calummoore/nargo/github.com/noir-lang/poseidon/v0.1.1/src/poseidon2.nr"},"63":{"source":"use common::get_address;\nuse poseidon::poseidon2;\n\nfn main(owner_pk: Field, message_hash: Field, address: pub Field, message: pub Field) {\n    let owner_address = get_address(owner_pk);\n    assert(owner_address == address, \"Address is not owned by the owner\");\n\n    let calc_message_hash = poseidon2::Poseidon2::hash([owner_pk, message], 2);\n    assert(calc_message_hash == message_hash, \"Message hash is invalid\");\n}\n\n#[test]\nfn test_main() {\n    let pk = 101;\n    let address = get_address(pk);\n    let message = 1000;\n    let message_hash = poseidon2::Poseidon2::hash([pk, message], 2);\n\n    println(message_hash);\n    println(address);\n\n    main(pk, message_hash, address, message)\n}\n","path":"/Users/calummoore/conductor/repo/zk-rollup/calummoore-petra/noir/signature/src/main.nr"}},"names":["main"],"brillig_names":[]}